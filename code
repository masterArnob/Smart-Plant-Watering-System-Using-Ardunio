#include <Servo.h>
#include <DHT.h>

#define DHTPIN 2
#define DHTTYPE DHT11
#define MOISTURE_PIN A0
#define TRIG 8
#define ECHO 9
#define RELAY 7
#define SERVO_PIN 6
#define FLOW_SENSOR 3

Servo gateServo;
DHT dht(DHTPIN, DHTTYPE);

volatile int flowCount = 0;
unsigned long oldTime = 0;

// Flow sensor interrupt
void flowISR() {
  flowCount++;
}

void setup() {
  Serial.begin(9600);

  pinMode(MOISTURE_PIN, INPUT);
  pinMode(TRIG, OUTPUT);
  pinMode(ECHO, INPUT);
  pinMode(RELAY, OUTPUT);

  gateServo.attach(SERVO_PIN);
  gateServo.write(0);  // Gate closed initially

  dht.begin();

  pinMode(FLOW_SENSOR, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR), flowISR, RISING);

  digitalWrite(RELAY, HIGH); // Make sure pump is OFF at start
}

void loop() {
  // 🌱 Soil Moisture Reading
  int moisture = analogRead(MOISTURE_PIN);
  Serial.print("Soil Moisture: ");
  Serial.print(moisture);

  // 💧 Pump Control (adjust threshold as needed)
  // Dry soil = high value (~800+), Wet = low (~300)
  if (moisture > 500) {   // Soil is dry → Pump ON
    digitalWrite(RELAY, LOW);   // Active LOW relay → Pump ON
    Serial.println(" -> Dry, Pump ON");
  } else {
    digitalWrite(RELAY, HIGH);  // Soil is wet → Pump OFF
    Serial.println(" -> Wet, Pump OFF");
  }

  // 🌡 Temperature & Humidity
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  Serial.print("Temp: "); Serial.print(t);
  Serial.print(" °C  Humidity: "); Serial.println(h);

  // 🚪 Ultrasonic Gate Control
  long duration, distance;
  digitalWrite(TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG, LOW);
  duration = pulseIn(ECHO, HIGH);
  distance = duration * 0.034 / 2;

  if (distance < 20) {
    gateServo.write(90);   // Open gate
    Serial.println("Gate Open");
  } else {
    gateServo.write(0);    // Close gate
    Serial.println("Gate Closed");
  }

  // ⏱ Flow Sensor Measurement
  if ((millis() - oldTime) > 1000) {
    detachInterrupt(digitalPinToInterrupt(FLOW_SENSOR));
    float flowRate = (flowCount / 7.5); // L/min (depends on sensor calibration)
    Serial.print("Flow Rate: ");
    Serial.print(flowRate);
    Serial.println(" L/min");
    flowCount = 0;
    oldTime = millis();
    attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR), flowISR, RISING);
  }

  delay(500);
}
